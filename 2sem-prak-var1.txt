Вариант 1, 2007 г.

1) Выписать фрагмент программы (не более 7 команд) для УМ-1, реализующий присваивание А:=А*А+В*В (А - 0200, В - 0204, 00 - запись в сумматор, 10 - чтение из сумматора, 01 - сложение, 03 - умножение).

====

1. 00 0200; S = A
2. 03 0200; S = A*A
3. 10 0200; A = S (==A*A)
4. 00 0204; S = B
5. 03 0204; S = B*B
6. 01 0200; S = (B*B)+(A*A)
7. 10 0200; A = S

====

2) Что будет напечатано в результате выполнения команд:
mov ax, -936
cwd
mov bx, 3
idiv bx
outword ax

====

-936/3 == -312 (слово в AX) == {по mod 2^16} == 2^16-312 == 65536-312 == 65224
Ответ: 65224.

====

3) Вычеркнуть неверные команды ( X db ?, W dw ?):
1. mov ax, x-w
2. add es, w
3. mov [bx]+2, 7
4. xchg bx, [bx]
5. sbb ax, 'X'
6. shl dx, 5

====

Верные: 1, 4, 5.
Неверные:
2 — нет такой команды.
3 — неизвестен размер операндов.
6 — в 8086 нет такой команды.

====

4) В программе под сегмент стека отведено 500 байтов. Выписать фрагмент программы на Ассемблере, который копирует находящиеся сейчас в стеке чётные числа-слова (word) в область памяти, начинающуюся с абсолютного адреса 7ABCDh. Считать, что эта область не пересекается ни со стеком, ни с этим фрагментом. Можно менять значения всех регистров, кроме SS и SP.

====

MOV BP, SP
CMP BP, 500
JAE EMPTY_STACK

; ES:BX == 7ABCDh
MOV BX, 7ABCh
MOV ES, BX
MOV BX, 0Dh

; Чётные — нулевое, второе, … слова.
; CX == (500-BP)/4
MOV CX, BP
NEG CX
ADD CX, 500
SHR CX, 1
SHR CX, 1
; ---- sending ----
L:	MOV AX, [BP]
	MOV ES:[BX], AX
	ADD BP, 4
	ADD BX, 2
	LOOP L
; ---- end of sending ----

EMPTY_STACK:

====

5) Указать значения al (в виде знакового десятичного числа), флагов CF, OF и SF после выполнения команд:
mov al, -56
add al, 170

====

-56 == {mod 2^8} == 200
-86 == {mod 2^8} == 170

200 + 170 == 370 ∉ [0; 256] => CF == 1
-56 + (-86) == -142 ∉ [-128; 127] => OF == 1
-56 + (-86) == -142 == {mod 2^8} == 114 ϵ [0; 127] => SF == 0

Ответ: AL == 114, CF == 1, OF == 1, SF == 0.

====

6) Описать на Ассемблере близкую процедуру, заголовок которой на Паскале имеет вид
procedure Assgn(var X:integer; n:integer);
Процедура реализует присваивание x:=n. Параметры передаются через стек. Процедура должна выполнять стандартные соглашения о связях. Привести пример вызова этой процедуры для выполнения присваивания cnt:=zero (cnt имеет тип word, zero описано через директиву equ).

====

ASSGN PROC NEAR
	PUSH BP
	MOV BP, SP
	PUSH AX
	PUSH ES

; On stack: ES_old, AX_old, BP_old, ret_adr, N, X_adr, X_seg...
; Pointer BP -> BP_old
	MOV ES, [BP+8]; ES == X_seg
	MOV AX, [BP+4]; AX == N
	MOV BP, [BP+6]; BP == X_adr
	MOV ES:[BP], AX; X = N

	POP ES
	POP AX
	POP BP
	RET 6
ASSGN ENDP

MOV AX, SEG cnt
PUSH AX
MOV AX, offset cnt
PUSH AX
MOV AX, zero
PUSH AX
CALL ASSGN

====

7) Привести макроопределение с заголовком JGT macro v, L (v - список переменных <v1,...,vk>, L - метка). Если значения всех переменных-слов из списка положительны (как знаковые числа) или таких переменных в списке нет, надо перейти на метку L. Выписать макрорасширение для макрокоманды JGT <z,a,y,w>, Con (a - байт, y, z - слова, w - двойное слово).

====

JGT MACRO V, L
	LOCAL NO_JMP_L
	IRP VAR, <V>
		IF TYPE VAR EQ WORD
			CMP VAR, 0
			JLE NO_JMP_L
		ENDIF
	ENDM
	JMP L
NO_JMP_L:
ENDM

JGT <z,a,y,w>, Con
; To...
CMP z, 0
JLE ??xxxx
CMP y, 0
JLE ??xxxx
JMP Con
??xxxx:

====

8) Программа на Ассемблере состоит из двух модулей. В кодовом сегменте головного модуля описана общедоступная (public) переменная X (word). Выписать второй модуль, который должен содержать процедуру с именем PechX, при вызове которой напечатается значение X как знаковое и как беззнаковое число.

====

INCLUDE IO.ASM
PUBLIC PechX
EXTRN X:WORD

CODE SEGMENT
	ASSUME CS:CODE

PechX PROC FAR
	PUSH AX
	PUSH DS

	MOV AX, SEG X
	MOV DS, AX
	MOV AX, X
	OUTINT AX, 6
	OUTWORD AX, 6

	POP DS
	POP AX
	RET
PechX ENDP
CODE ENDS
END

====

9) В программе на Ассемблере есть предложения: extrn x:abs и mov ax, x. Какая служебная программа подставляет конкретное значение на место операнда X в команде mov ax, x ?

====

Линковщик. Во время компиляции данного модуля значение X неизвестно.

====

10) Дать определения следующих понятий для УМ-3:
а) адрес ячейки;
б) машинное слово;
в) код операции.

====

а) Порядковый номер ячейки, начиная с нуля.
б) Содержимое ячейки памяти.
в) Номер команды для интерпретации машиной.
