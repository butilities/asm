Вариант 2, 2007 г.

1) Выписать фрагмент программы (не более 7 команд) для безадресной (стековой) учебной машины, реализующий присваивание А:=А*А+В*В (А <-> 0200, В <-> 0204, 00 - запись в сумматор, 10 - чтение из сумматора, 01 - сложение, 03 - умножение).

====

В задании сделаем замену s/сумматор/стек/g, иначе фигня получается.

1. 00 0200; Стек: A
2. 00 0200; Стек: A, A
3. 03;      Стек: A*A
4. 00 0204; Стек: A*A, B
5. 00 0204; Стек: A*A, B, B
6. 03;      Стек: A*A, B*B
7. 01;      Стек: (A*A)+(B*B)
8. 10 0200; A = (A*A)+(B*B)

====

2) Что будет напечатано в результате выполнения команд:
mov ax, 342
mov bl, 2
div bl
cbw
outint ax

====

342/2 == 171 == {mod 2^8} == 171-256 == -85
Ответ: -85.

====

3) Вычеркнуть неверные команды ( X db ?, W dw ?):
1. mov ax, x-w
2. sub AX, DS
3. mov 5[BX][SI], 5000
4. xchg bx, [bx]
5. mov ax, 'X'
6. mov AX, [BL]

====

Верные: 1, 3, 4, 5.
Неверные:
2 — нет такой команды.
6 — нет модификации по байтовым регистрам.

====

4) В программе под сегмент стека отведено 600 байтов. Выписать фрагмент программы на Асcемблере, который копирует находящиеся сейчас в стеке положительные числа-слова (word) в область памяти, начинающуюся с абсолютного адреса 5EFDCh. Считать, что эта область не пересекается ни со стеком, ни с этим фрагментом. Можно менять значения всех регистров, кроме SS и SP.

====

CMP SP, 600
JAE EMPTY_STACK

MOV BX, 5EFDh
MOV ES, BX
MOV BX, 0Ch

; CX = (600-SP)/2
MOV BP, SP
MOV CX, BP
NEG CX
ADD CX, 600
SHR CX, 1; words count
; ----
L:	MOV AX, [BP]
	CMP AX, 0
	JLE L1
	MOV ES:[BX], AX
	ADD BX, 2
L1:	ADD BP, 2
	LOOP L
; ----

EMPTY_STACK:

====

5) Указать значения BL (в виде знакового десятичного числа), флагов CF, OF и SF после выполнения команд:
mov BL, 160
sub BL, -56

====

160 == {mod 2^8} == -96.
200 == {mod 2^8} == -56.
160 - 200 == -40 ∉ [0; 255] => CF == 1.
-96 - (-56) == -40 ϵ [-128; 127] => OF == 0.
-96 - (-56) == -40 == {mod 2^8} == -40 -> SF == 1.

Ответ: BL == -40, CF == 1, OF == 0, SF == 1.

====

6) Описать на Ассемблере близкую процедуру, заголовок которой на Паскале имеет вид
procedure AddNum( var X:integer; c:integer );
Процедура реализует присваивание x:=x+c. Параметры передаются через стек. Процедура должна выполнять стандартные соглашения о cвязях. Привести пример вызова этой процедуры для выполнения присваивания cnt:=cnt+one (cnt имеет тип word, one описано через директиву equ).

AddNum PROC NEAR
	PUSH BP
	MOV BP, SP
	PUSH ES
	PUSH AX

; On stack: AX_old, ES_old, BP_old, ret_adr, C, X_adr, X_seg, ...
; Pointer BP -> BP_old

	MOV AX, [BP+4]; AX == C
	MOV ES, [BP+8]
	MOV BP, [BP+6]; WORD PTR ES:[BP] == X

	ADD ES:[BP], AX

	POP AX
	POP ES
	POP BP
	RET 6
ADDNum ENDP

MOV AX, SEG cnt
PUSH AX
MOV AX, offset cnt
PUSH AX
MOV AX, one
PUSH AX
CALL AddNum

7) Привести макроопределение с заголовком JzeroL macro v, L (v - список переменных <v1,...,vk>, L - метка). Если значения всех переменных-байтов из списка положительны (как знаковые числа) или таких переменных в списке нет, надо перейти на метку L. Выписать макрорасширение для макрокоманды JzeroL <z,a,y,w>, Con (a - байт, y, z - слова, w - двойное слово).

====

JzeroL MACRO V, L
	LOCAL NO_JMP_L
	IRP VAR, <V>
		IF TYPE VAR EQ BYTE
			CMP VAR, 0
			JLE NO_JMP_L
		ENDIF
	ENDM
	JMP L
NO_JMP_L:
ENDM

JzeroL <az,a,y,w>, Con
; To...
CMP a, 0
JLE ??xxxx
JMP Con
??xxxx:

====

8) Программа на Ассемблере состоит из двух модулей. В кодовом сегменте головного модуля описана общедоступная (public) переменная y типа byte (со знаком). Выписать второй модуль, который должен содержать процедуру с именем PechAbsY, при вызове которой напечатается абсолютное значение y.

====

INCLUDE IO.ASM
PUBLIC PechAbsY
EXTRN Y:BYTE

CODE SEGMENT
	ASSUME CS:CODE

PechAbsY PROC FAR
	PUSH ES
	PUSH AX

	MOV AX, SEG Y
	MOV ES, AX
	MOV AL, ES:Y
	CBW
	CMP AX, 0
	JAE AE
	NEG AX
AE:	OUTINT AX

	POP AX
	POP ES
	RET
PechAbsY ENDP
CODE ENDS

====

9) В программе на Ассемблере есть предложения: data segment и mov ax, data. Какая служебная программа подставляет конкретное значение на место операнда data в команде mov ax, data ?

====

Загрузчик. Адреса сегментов становятся известны непосредственно перед загрузкой программы в ОП.

====

10) Дать определения следующих понятий для УМ-3:
а) регистр
б) регистр адреса (счётчик адреса)
в) регистр команды

====

а) Ячейка памяти, выполненная отдельно от основной ОП, например, на ЦП.
б) Регистр АЛУ. При выполнении текущей команды в него записывается адрес
команды, которая выполнится следующей. Если выполняемая команда — команда
перехода, то записывается адрес, перехода. Иначе, адрес следующей по порядку
записи команды.
в) Регистр, на котором хранится текущая выполняемая команда.
