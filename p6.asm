; Alexander Turenko. 5.4.6.
INCLUDE IO\io.asm
INCLUDE IO\moreio.asm

STACK SEGMENT STACK
	DB 256 DUP (?)
STACK ENDS
DATA SEGMENT
	N EQU 100
	X DB N DUP (?), '.'
DATA ENDS

CODE SEGMENT
	ASSUME SS:STACK, DS:DATA, CS:CODE

PR1 PROC; first symbol in DX, size in CX
	CMP CX, 0
	JE Q1

	PUSH CX
	PUSH BX
	PUSH SI
	MOV BX, DX
	MOV SI, CX
L2:	DEC SI
	CMP BYTE PTR [BX+SI-1], 'a'
	JB NOLOW
	CMP BYTE PTR [BX+SI-1], 'z'
	JA NOLOW
	ADD BYTE PTR [BX+SI-1], 'A'-'a'
NOLOW:	LOOP L2
	POP SI
	POP BX
	POP CX
Q1:	RET
PR1 ENDP

PR2 PROC; first symbol in DX, size in CX
	CMP CX, 0
	JE Q2

	PUSH CX
	PUSH BX
	PUSH SI
	PUSH AX
	MOV BX, DX
	MOV SI, 1
	MOV AH, [BX]
	DEC CX

L3:	CMP AH, [BX+SI]
	JNE NXT

	PUSH CX
	PUSH SI
	INC CX; for symbol '$'
L4:	MOV AL, [BX+SI]
	MOV [BX+SI-1], AL
	INC SI
	LOOP L4
	POP SI
	POP CX
	DEC SI

NXT:	INC SI
	MOV AH, [BX+SI-1]
	LOOP L3

	POP AX
	POP SI
	POP BX
	POP CX
Q2:	RET
PR2 ENDP

START:	MOV AX, DATA
	MOV DS, AX

	OUTCH '>'
	OUTCH ' '

	MOV CX, N
	MOV SI, 0
LL:	INCH AH
	CMP AH, '.'
	JE NEXT
	MOV X[SI], AH
	INC SI
	LOOP LL

NEXT:	OUTCH '<'
	OUTCH ' '

        MOV X[SI], '.'
	LEA DX, X
	OUTSTR_MORE '.'
	NEWLINE

	MOV AL, 0; upper
	MOV AH, 0; lower
	MOV CX, SI
	MOV SI, 0

	CMP CX, 0
	JE NXT1

L:	CMP X[SI], 'A'
	JB CMPLOW
	CMP X[SI], 'Z'
	JA CMPLOW
	INC AL
	JMP COMMON
CMPLOW:	CMP X[SI], 'a'
	JB COMMON
	CMP X[SI], 'z'
	JA COMMON
	INC AH
COMMON:	INC SI
	LOOP L

	OUTCH '<'
	OUTCH ' '
NXT1:	MOV CX, SI; size
	CMP AL, AH
	JNE TWO
	OUTCH '1'
	NEWLINE
	CALL PR1
	JMP OUTS
TWO:	OUTCH '2'
	NEWLINE
	CALL PR2

OUTS:	OUTCH '<'
	OUTCH ' '
        LEA DX, X
	OUTSTR_MORE '.'
	NEWLINE

	FINISH
CODE ENDS
END START

